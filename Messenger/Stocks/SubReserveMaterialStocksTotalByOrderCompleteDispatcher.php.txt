<?php
/*
 *  Copyright 2025.  Baks.dev <admin@baks.dev>
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is furnished
 *  to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

declare(strict_types=1);

namespace BaksDev\Materials\Stocks\Messenger\Stocks;

use BaksDev\Core\Deduplicator\DeduplicatorInterface;
use BaksDev\Core\Messenger\MessageDispatchInterface;
use BaksDev\Materials\Stocks\Messenger\Stocks\SubMaterialStocksTotal\SubMaterialStocksTotalAndReserveMessage;
use BaksDev\Materials\Stocks\Repository\MaterialWarehouseByOrder\MaterialWarehouseByOrderInterface;
use BaksDev\Orders\Order\Entity\Event\OrderEvent;
use BaksDev\Orders\Order\Messenger\OrderMessage;
use BaksDev\Orders\Order\Type\Status\OrderStatus\Collection\OrderStatusCompleted;
use BaksDev\Users\Profile\UserProfile\Type\Id\UserProfileUid;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Component\DependencyInjection\Attribute\Target;
use Symfony\Component\Messenger\Attribute\AsMessageHandler;

/**
 * Снимаем резерв и остаток со склада сырья при статусе заказа Completed «Выполнен»
 */
#[AsMessageHandler(priority: 60)]
final readonly class SubReserveMaterialStocksTotalByOrderCompleteDispatcher
{
    public function __construct(
        #[Target('materialsStocksLogger')] private readonly LoggerInterface $logger,
        private EntityManagerInterface $entityManager,
        private MaterialWarehouseByOrderInterface $warehouseByOrder,
        private MessageDispatchInterface $messageDispatch,
        private DeduplicatorInterface $deduplicator,
    ) {}

    public function __invoke(OrderMessage $message): void
    {
        // TODO:
        return;


        $Deduplicator = $this->deduplicator
            ->namespace('materials-stocks')
            ->deduplication([
                (string) $message->getId(),
                OrderStatusCompleted::STATUS,
                self::class
            ]);

        if($Deduplicator->isExecuted())
        {
            return;
        }

        $this->entityManager->clear();

        /** @var OrderEvent $OrderEvent */
        $OrderEvent = $this->entityManager
            ->getRepository(OrderEvent::class)
            ->find($message->getEvent());

        if(!$OrderEvent)
        {
            return;
        }

        /** Если статус заказа не Completed «Выполнен» */
        if(false === $OrderEvent->isStatusEquals(OrderStatusCompleted::class))
        {
            return;
        }


        /**
         * Получаем склад, на который была отправлена заявка для сборки.
         *
         * @var UserProfileUid $UserProfileUid
         */
        $UserProfileUid = $this->warehouseByOrder->getWarehouseByOrder($message->getId());

        if(!$UserProfileUid)
        {
            return;
        }

        /** @var OrderMaterial $material */
        foreach($OrderEvent->getMaterial() as $material)
        {
            /* Снимаем резерв со склада при доставке */
            $this->changeReserve($material, $UserProfileUid);
        }

        $Deduplicator->save();
    }

    public function changeReserve(OrderMaterial $material, UserProfileUid $profile): void
    {
        // TODO:
        return;

        /** Получаем продукт */

        /** ID продукта */
        $MaterialUid = $this->entityManager
            ->getRepository(ProductEvent::class)
            ->find($material->getMaterial())?->getMain();

        /** Постоянный уникальный идентификатор ТП */
        $MaterialOfferConst = $material->getOffer() ? $this->entityManager
            ->getRepository(ProductOffer::class)
            ->find($material->getOffer())?->getConst() : null;

        /** Постоянный уникальный идентификатор варианта */
        $MaterialVariationConst = $material->getVariation() ? $this->entityManager
            ->getRepository(ProductVariation::class)
            ->find($material->getVariation())?->getConst() : null;

        /** Постоянный уникальный идентификатор модификации */
        $MaterialModificationConst = $material->getModification() ? $this->entityManager
            ->getRepository(ProductModification::class)
            ->find($material->getModification())?->getConst() : null;

        /**
         * Снимаем резерв и остаток сырья на складе по одной единице сырья
         */

        $this->logger->info('Снимаем резерв и остаток на складе при выполненном заказа:');

        for($i = 1; $i <= $material->getTotal(); $i++)
        {
            $SubMaterialStocksTotalMessage = new SubMaterialStocksTotalAndReserveMessage(
                $profile,
                $MaterialUid,
                $MaterialOfferConst,
                $MaterialVariationConst,
                $MaterialModificationConst
            );

            $this->messageDispatch->dispatch($SubMaterialStocksTotalMessage, transport: 'materials-stocks');

            if($i === $material->getTotal())
            {
                break;
            }
        }
    }
}
